# Generated by Django 5.1.6 on 2025-03-06 11:32

import django.db.models.deletion
from django.db import migrations, models

import activitypub.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("activitypub", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="WorkoutAnchor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ap_id", models.CharField(default=activitypub.utils.generate_ulid)),
                ("ap_uri", models.URLField(max_length=1024)),
                ("local_uri", models.URLField(max_length=1024)),
                (
                    "actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workout_anchors",
                        to="activitypub.actor",
                    ),
                ),
                (
                    "note_activities",
                    models.ManyToManyField(
                        related_name="note_activities", to="activitypub.activity"
                    ),
                ),
                (
                    "workout_activities",
                    models.ManyToManyField(
                        related_name="workout_activities", to="activitypub.activity"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SwimWorkout",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("processing", "processing"),
                            ("finished", "finished"),
                            ("error", "error"),
                        ],
                        default="pending",
                        max_length=32,
                    ),
                ),
                (
                    "fit_file",
                    models.FileField(blank=True, null=True, upload_to="fit-files"),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True, help_text="Duration in seconds", null=True
                    ),
                ),
                ("calories_burned", models.PositiveIntegerField(blank=True, null=True)),
                ("heart_rate_min", models.IntegerField(blank=True, null=True)),
                ("heart_rate_avg", models.IntegerField(blank=True, null=True)),
                ("heart_rate_max", models.IntegerField(blank=True, null=True)),
                ("time_in_hr_zones", models.JSONField(blank=True, null=True)),
                ("altitude_min", models.FloatField(blank=True, null=True)),
                ("altitude_max", models.FloatField(blank=True, null=True)),
                ("altitude_avg", models.FloatField(blank=True, null=True)),
                ("temperature_min", models.IntegerField(blank=True, null=True)),
                ("temperature_max", models.IntegerField(blank=True, null=True)),
                ("temperature_avg", models.IntegerField(blank=True, null=True)),
                ("distance_in_meters", models.FloatField(blank=True, null=True)),
                (
                    "pace_avg",
                    models.IntegerField(
                        blank=True,
                        help_text="Average pace in seconds per 100m",
                        null=True,
                    ),
                ),
                (
                    "pace_best",
                    models.IntegerField(
                        blank=True, help_text="Best pace in seconds per 100m", null=True
                    ),
                ),
                (
                    "pool_length",
                    models.IntegerField(
                        blank=True, help_text="Pool length in meters", null=True
                    ),
                ),
                ("is_open_water", models.BooleanField(default=False)),
                (
                    "stroke_count",
                    models.IntegerField(
                        blank=True, help_text="Total number of strokes", null=True
                    ),
                ),
                ("strokes_per_length_avg", models.FloatField(blank=True, null=True)),
                (
                    "swolf_avg",
                    models.IntegerField(
                        blank=True,
                        help_text="Average swim golf score (strokes + seconds)",
                        null=True,
                    ),
                ),
                (
                    "swolf_best",
                    models.IntegerField(
                        blank=True, help_text="Best swim golf score", null=True
                    ),
                ),
                ("freestyle_time", models.IntegerField(blank=True, null=True)),
                ("backstroke_time", models.IntegerField(blank=True, null=True)),
                ("breaststroke_time", models.IntegerField(blank=True, null=True)),
                ("butterfly_time", models.IntegerField(blank=True, null=True)),
                ("drill_time", models.IntegerField(blank=True, null=True)),
                ("mixed_time", models.IntegerField(blank=True, null=True)),
                (
                    "rest_time",
                    models.IntegerField(
                        blank=True, help_text="Total rest time in seconds", null=True
                    ),
                ),
                (
                    "stroke_rate_avg",
                    models.FloatField(
                        blank=True, help_text="Average strokes per minute", null=True
                    ),
                ),
                ("training_effect_aerobic", models.FloatField(blank=True, null=True)),
                (
                    "anchor",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_workout",
                        to="workouts.workoutanchor",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RunWorkout",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("processing", "processing"),
                            ("finished", "finished"),
                            ("error", "error"),
                        ],
                        default="pending",
                        max_length=32,
                    ),
                ),
                (
                    "fit_file",
                    models.FileField(blank=True, null=True, upload_to="fit-files"),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True, help_text="Duration in seconds", null=True
                    ),
                ),
                ("calories_burned", models.PositiveIntegerField(blank=True, null=True)),
                ("heart_rate_min", models.IntegerField(blank=True, null=True)),
                ("heart_rate_avg", models.IntegerField(blank=True, null=True)),
                ("heart_rate_max", models.IntegerField(blank=True, null=True)),
                ("time_in_hr_zones", models.JSONField(blank=True, null=True)),
                ("altitude_min", models.FloatField(blank=True, null=True)),
                ("altitude_max", models.FloatField(blank=True, null=True)),
                ("altitude_avg", models.FloatField(blank=True, null=True)),
                ("temperature_min", models.IntegerField(blank=True, null=True)),
                ("temperature_max", models.IntegerField(blank=True, null=True)),
                ("temperature_avg", models.IntegerField(blank=True, null=True)),
                ("distance_in_meters", models.FloatField(blank=True, null=True)),
                (
                    "pace_avg",
                    models.IntegerField(
                        blank=True,
                        help_text="Average pace in seconds per kilometer",
                        null=True,
                    ),
                ),
                (
                    "pace_best",
                    models.IntegerField(
                        blank=True,
                        help_text="Best pace in seconds per kilometer",
                        null=True,
                    ),
                ),
                (
                    "cadence_avg",
                    models.IntegerField(
                        blank=True, help_text="Average steps per minute", null=True
                    ),
                ),
                (
                    "cadence_max",
                    models.IntegerField(
                        blank=True, help_text="Maximum steps per minute", null=True
                    ),
                ),
                (
                    "stride_length_avg",
                    models.FloatField(
                        blank=True,
                        help_text="Average stride length in meters",
                        null=True,
                    ),
                ),
                (
                    "vertical_oscillation_avg",
                    models.FloatField(
                        blank=True,
                        help_text="Average vertical oscillation in cm",
                        null=True,
                    ),
                ),
                (
                    "ground_contact_time_avg",
                    models.IntegerField(
                        blank=True,
                        help_text="Average ground contact time in ms",
                        null=True,
                    ),
                ),
                ("training_effect_aerobic", models.FloatField(blank=True, null=True)),
                ("training_effect_anaerobic", models.FloatField(blank=True, null=True)),
                ("vo2_max", models.FloatField(blank=True, null=True)),
                ("elevation_gain", models.FloatField(blank=True, null=True)),
                ("elevation_loss", models.FloatField(blank=True, null=True)),
                (
                    "anchor",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_workout",
                        to="workouts.workoutanchor",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CyclingWorkout",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("processing", "processing"),
                            ("finished", "finished"),
                            ("error", "error"),
                        ],
                        default="pending",
                        max_length=32,
                    ),
                ),
                (
                    "fit_file",
                    models.FileField(blank=True, null=True, upload_to="fit-files"),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True, help_text="Duration in seconds", null=True
                    ),
                ),
                ("calories_burned", models.PositiveIntegerField(blank=True, null=True)),
                ("heart_rate_min", models.IntegerField(blank=True, null=True)),
                ("heart_rate_avg", models.IntegerField(blank=True, null=True)),
                ("heart_rate_max", models.IntegerField(blank=True, null=True)),
                ("time_in_hr_zones", models.JSONField(blank=True, null=True)),
                ("altitude_min", models.FloatField(blank=True, null=True)),
                ("altitude_max", models.FloatField(blank=True, null=True)),
                ("altitude_avg", models.FloatField(blank=True, null=True)),
                ("temperature_min", models.IntegerField(blank=True, null=True)),
                ("temperature_max", models.IntegerField(blank=True, null=True)),
                ("temperature_avg", models.IntegerField(blank=True, null=True)),
                ("distance_in_meters", models.FloatField(blank=True, null=True)),
                (
                    "speed_avg",
                    models.FloatField(
                        blank=True, help_text="Average speed in m/s", null=True
                    ),
                ),
                (
                    "speed_max",
                    models.FloatField(
                        blank=True, help_text="Maximum speed in m/s", null=True
                    ),
                ),
                (
                    "power_avg",
                    models.IntegerField(
                        blank=True, help_text="Average power in watts", null=True
                    ),
                ),
                (
                    "power_max",
                    models.IntegerField(
                        blank=True, help_text="Maximum power in watts", null=True
                    ),
                ),
                (
                    "cadence_avg",
                    models.IntegerField(
                        blank=True, help_text="Average pedal cadence in rpm", null=True
                    ),
                ),
                (
                    "cadence_max",
                    models.IntegerField(
                        blank=True, help_text="Maximum pedal cadence in rpm", null=True
                    ),
                ),
                (
                    "grade_avg",
                    models.FloatField(
                        blank=True, help_text="Average grade in percent", null=True
                    ),
                ),
                (
                    "grade_max",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum positive grade in percent",
                        null=True,
                    ),
                ),
                (
                    "grade_min",
                    models.FloatField(
                        blank=True,
                        help_text="Maximum negative grade in percent",
                        null=True,
                    ),
                ),
                ("elevation_gain", models.FloatField(blank=True, null=True)),
                ("elevation_loss", models.FloatField(blank=True, null=True)),
                (
                    "anchor",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_workout",
                        to="workouts.workoutanchor",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
